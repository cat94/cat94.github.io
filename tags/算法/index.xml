<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Shen Jianan的随缘更新</title>
    <link>http://www.shenjianan.top/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Shen Jianan的随缘更新</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans</language>
    <copyright>&lt;strong&gt;欢迎通过&lt;a href=&#34;mailto:shen_jianan@foxmail.com&#34;&gt;邮箱&lt;/a&gt;(shen_jianan@foxmail.com)探讨问题&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。 &lt;br /&gt;</copyright>
    <lastBuildDate>Wed, 11 Nov 2020 13:48:46 +0800</lastBuildDate>
    
	<atom:link href="http://www.shenjianan.top/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基数统计:从Linear Counting到Hyper LogLog</title>
      <link>http://www.shenjianan.top/posts/algorithm/%E5%9F%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Wed, 11 Nov 2020 13:48:46 +0800</pubDate>
      
      <guid>http://www.shenjianan.top/posts/algorithm/%E5%9F%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;应用场景&#34;&gt;应用场景&lt;/h1&gt;
&lt;p&gt;基数统计(Cardinality Counting)指计算一个数据集中不同元素的数量，在很多场景都需要这样的功能：电商场景中的独立用户(UV)数量统计、数据库中快速计算字段取值数量以优化query、计算与某个站点相关的不同链接数量等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再探排序</title>
      <link>http://www.shenjianan.top/posts/algorithm/%E5%86%8D%E6%8E%A2%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 18 Mar 2016 22:27:53 +0000</pubDate>
      
      <guid>http://www.shenjianan.top/posts/algorithm/%E5%86%8D%E6%8E%A2%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;再探排序&#34;&gt;再探排序&lt;/h1&gt;
&lt;p&gt;记得之前写过一篇关于快排的博客，当时只是写了一个快排的代码片段，加上简单的优化意见——当递归到一定规模的序列时使用插排提升效率、随机选取比较的元。那篇博客是在准备面试时看到网上一些资料而写的简单的笔记。&lt;/p&gt;
&lt;p&gt;最近在重新读《数据结构与算法分析》，这本书是大二时数据结构课的教材。记得当初上课没有用心学习，最后的成绩也算是勉勉强强八十几分。到现在，对于排序也就记得大体的思想，真正上手写代码却是漏洞百出。现在重新回顾，得到了很多新的感悟，原来像团团迷雾的算法细节也终于清晰起来。本篇博客会对插入排序、希尔排序、快速排序、归并排序的读书体会与收获进行记录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单搜索二叉树&amp;红黑树小结</title>
      <link>http://www.shenjianan.top/posts/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Thu, 24 Sep 2015 10:00:10 +0000</pubDate>
      
      <guid>http://www.shenjianan.top/posts/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;p&gt;二叉树是很重要的数据结构，今次的任务是复习一下搜索二叉树和红黑树~主要对应《算法导论》中的《二叉搜索树》和《红黑树》两章。这里的搜索二叉树不是B树，所以插入操作时不需要进行专门的旋转操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线性时间排序</title>
      <link>http://www.shenjianan.top/posts/algorithm/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 23 Sep 2015 16:23:53 +0000</pubDate>
      
      <guid>http://www.shenjianan.top/posts/algorithm/%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;任何基于决策树的比较排序在最坏情况下都要经过$\Omega(nlgn)$次比较。因此，任何已知的比较排序最多在常数因子上优于归并排序和堆排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>快速排序算法小结</title>
      <link>http://www.shenjianan.top/posts/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Tue, 22 Sep 2015 19:03:48 +0000</pubDate>
      
      <guid>http://www.shenjianan.top/posts/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;p&gt;快速排序最坏情况下的时间复杂度是$\Theta(n^2)$，但是它的期望时间复杂度是$\Theta(nlogn)$，而且隐含的常数因子非常小。&lt;/p&gt;
&lt;p&gt;今天的文章复习一下快排的原理和尝试着自己实现一下代码。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>